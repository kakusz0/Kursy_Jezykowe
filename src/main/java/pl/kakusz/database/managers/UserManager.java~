package pl.kakusz.database.managers;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.mindrot.jbcrypt.BCrypt;
import pl.kakusz.database.objects.User;

import java.util.concurrent.CompletableFuture;

public class UserManager {

    private final SessionFactory sessionFactory;

    public UserManager() {
        this.sessionFactory = HibernateManager.getSessionFactory();
    }

    public void saveUser(User user) {
        CompletableFuture.runAsync(() -> {
            Transaction transaction = null;
            try (Session session = sessionFactory.openSession()) {
                transaction = session.beginTransaction();
                session.save(user);
                transaction.commit();
            } catch (Exception e) {
                if (transaction != null) transaction.rollback();
                e.printStackTrace();
            }
        });
    }

    private CompletableFuture<Boolean> existsByField(String fieldName, String value) {
        return CompletableFuture.supplyAsync(() -> {
            try (Session session = sessionFactory.openSession()) {
                Long count = (Long) session.createQuery(
                                "SELECT COUNT(u) FROM User u WHERE u." + fieldName + " = :value")
                        .setParameter("value", value)
                        .uniqueResult();
                return count > 0;
            } catch (Exception e) {
                e.printStackTrace();
                return false;
            }
        });
    }

    public CompletableFuture<Boolean> userExists(String username) {
        return existsByField("username", username);
    }

    public CompletableFuture<Boolean> emailExists(String email) {
        return existsByField("email", email);
    }

    private CompletableFuture<User> getUserByField(String fieldName, String value) {
        return CompletableFuture.supplyAsync(() -> {
            try (Session session = sessionFactory.openSession()) {
                return (User) session.createQuery(
                                "FROM User u WHERE u." + fieldName + " = :value")
                        .setParameter("value", value)
                        .uniqueResult();
            } catch (Exception e) {
                e.printStackTrace();
                return null;
            }
        });
    }

    public CompletableFuture<User> getUserByUsername(String username) {
        return getUserByField("username", username);
    }

    public CompletableFuture<User> getUserByEmail(String email) {
        return getUserByField("email", email);
    }

    public CompletableFuture<Boolean> updatePassword(String email, String oldPassword, String newPassword) {
        return CompletableFuture.supplyAsync(() -> {
            Transaction transaction = null;
            try (Session session = sessionFactory.openSession()) {
                User user = (User) session.createQuery(
                                "FROM User u WHERE u.email = :email")
                        .setParameter("email", email)
                        .uniqueResult();

                if (user != null && BCrypt.checkpw(oldPassword, user.getPassword())) {

                    transaction = session.beginTransaction();
                    user.setPassword(BCrypt.hashpw(newPassword, BCrypt.gensalt(12)));
                    session.update(user);
                    transaction.commit();
                    return true;
                } else {
                    return false;
                }
            } catch (Exception e) {
                if (transaction != null) transaction.rollback();
                e.printStackTrace();
                return false;
            }
        });
    }
}
